Q: Trace (by hand) the execution of this program.  Double check by
executing it in the machine.
#include <u.h>
#include <libc.h>
void
main(int, char*[])
{
	fork();
	fork();
	print("hi\n");
	exits(nil);
}
Compile and execute the first program shown in this chapter.  Explain
the output.
A: The program will fork, creating two exact same processes that will
fork yet again to finally print "hi".  The verdict is that the program
will print "hi" four times.

Q: Fix the program from the previous problem using wait(2).
A: see solution4.8_fork.c

Q: Implement your own version of the time(1) tool.  This program runs
a single command and reports the time the command took to execute
(elapsed time, time spent executing user code, and time spent
executing kernel code).
A: see solution4.8_time.c 

Q: Implement a function
char* system(char* cmd);
That receives a command line as an argument and must execute it in a
child process like the Plan 9 shell would do.  Think of a reasonable
return value for the function.  Hint: Which program did we say that
knows how to do this type of work?
A: see solution4.8_system.c

Q: Write a script that interprets another script, for example, by
using rc.  Can you specify that a program inter- preter is also an
interpreted file?  Explain.
A: see solution4.8_interpreter.rc.  To specify that a program
interpreter is also an interpreted file, we write a so called
shebang at the beginning of the script. We cannot however, use
the shellscript as the shebang. This would result in the error:
/fd/0:1: solution4.8_interpreter-test.rc: exec header invalid

Q: How could you overcome the limitation expossed in the previous
problem?
A: I don't understand this question.
